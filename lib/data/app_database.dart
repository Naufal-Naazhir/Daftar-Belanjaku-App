import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

part 'app_database.g.dart'; // This file will be generated by drift_dev

// Define the tables
class ShoppingLists extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get name => text().withLength(min: 1, max: 100)();
  IntColumn get createdAt => integer()();
  IntColumn get updatedAt => integer()();
}

class ShoppingItems extends Table {
  IntColumn get id => integer().autoIncrement()();
  IntColumn get listId => integer().references(ShoppingLists, #id, onDelete: KeyAction.cascade)();
  TextColumn get name => text().withLength(min: 1, max: 100)();
  RealColumn get price => real().nullable()();
  RealColumn get quantity => real().nullable()();
  TextColumn get unit => text().nullable().withLength(min: 1, max: 20)();
  BoolColumn get isBought => boolean().withDefault(const Constant(false))();
  IntColumn get orderIndex => integer().withDefault(const Constant(0))();
}

class ItemCategories extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get name => text().unique().withLength(min: 1, max: 50)();
}

class PresetItems extends Table {
  IntColumn get id => integer().autoIncrement()();
  IntColumn get categoryId => integer().references(ItemCategories, #id, onDelete: KeyAction.cascade)();
  TextColumn get name => text().withLength(min: 1, max: 100)();
  RealColumn get defaultPrice => real().nullable()();
  RealColumn get defaultQuantity => real().nullable()();
  TextColumn get defaultUnit => text().nullable().withLength(min: 1, max: 20)();
  IntColumn get orderIndex => integer().withDefault(const Constant(0))();
}

class PantryItems extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get name => text().withLength(min: 1, max: 100)();
  RealColumn get quantity => real().nullable()();
  TextColumn get unit => text().nullable().withLength(min: 1, max: 20)();
  IntColumn get purchaseDate => integer()();
  IntColumn get expiryDate => integer().nullable()();
}

@DriftDatabase(
  tables: [ShoppingLists, ShoppingItems, ItemCategories, PresetItems, PantryItems],
  daos: [ShoppingListsDao, ShoppingItemsDao],
)
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1;
}

@DriftAccessor(tables: [ShoppingLists, ShoppingItems])
class ShoppingListsDao extends DatabaseAccessor<AppDatabase> with _$ShoppingListsDaoMixin {
  ShoppingListsDao(super.db);

  // Watch all shopping lists
  Stream<List<ShoppingList>> watchAllLists() => select(shoppingLists).watch();

  // Get a single list
  Future<ShoppingList> getList(int id) => (select(shoppingLists)..where((tbl) => tbl.id.equals(id))).getSingle();

  // Create a new shopping list
  Future<int> createList(String name) {
    return into(shoppingLists).insert(
      ShoppingListsCompanion.insert(
        name: name,
        createdAt: DateTime.now().millisecondsSinceEpoch,
        updatedAt: DateTime.now().millisecondsSinceEpoch,
      ),
    );
  }

  // Update a shopping list
  Future<bool> updateList(ShoppingListsCompanion entity) {
    return update(shoppingLists).replace(entity);
  }

  // Delete a shopping list
  Future<int> deleteList(int id) {
    return (delete(shoppingLists)..where((tbl) => tbl.id.equals(id))).go();
  }
}

@DriftAccessor(tables: [ShoppingItems])
class ShoppingItemsDao extends DatabaseAccessor<AppDatabase> with _$ShoppingItemsDaoMixin {
  ShoppingItemsDao(super.db);

  Stream<List<ShoppingItem>> watchItemsInList(int listId) {
    return (select(shoppingItems)..where((tbl) => tbl.listId.equals(listId))).watch();
  }

  Future<int> addItem(ShoppingItemsCompanion entry) {
    return into(shoppingItems).insert(entry);
  }

  Future<bool> updateItem(ShoppingItem entry) {
    return update(shoppingItems).replace(entry);
  }

  Future<int> deleteItem(int intId) {
    return (delete(shoppingItems)..where((tbl) => tbl.id.equals(intId))).go();
  }
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    return NativeDatabase.createInBackground(file);
  });
}